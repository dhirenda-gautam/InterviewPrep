import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

class EvenOddTask implements Callable{

  private String threadName;
  private int maxNumber;


  EvenOddTask(String threadName,int maxNumber){
    this.threadName = threadName;
    this.maxNumber = maxNumber;
  }

  @Override public Boolean call()  {

    if(threadName.equalsIgnoreCase("Odd")){
      synchronized (this){
        for (int i=1;i<maxNumber;i=i+2){
          System.out.println("Printing Using Thread: "+threadName + " :" +i);
          notify();
          try {
            wait();
          } catch (InterruptedException e) {
            e.printStackTrace();
            return false;
          }
        }
      }
      return true;
    } else if(threadName.equalsIgnoreCase("Even")){
       synchronized (this){
         for (int i=2;i<maxNumber;i=i+2){
           try {
             wait();
           } catch (InterruptedException e) {
             e.printStackTrace();
             return false;
           }
           System.out.println("Printing Using Thread: "+threadName + " :" +i);
           notify();
         
         }
       }
       return true;
    }
    return false;
  }
}

public class ExecutorFrameWorkTest {

  public static void main(String args[]) throws ExecutionException, InterruptedException {

    Scanner sc = new Scanner(System.in);
    System.out.println("Enter Max Value to Print ");
    int number = sc.nextInt();

    ExecutorService service = Executors.newFixedThreadPool(2);

    EvenOddTask evenTask = new EvenOddTask("Even", number);
    EvenOddTask oddTask = new EvenOddTask("Odd", number);

    List<EvenOddTask> runner = new ArrayList<>();
    runner.add(oddTask);
    runner.add(evenTask);
    List<Future<Boolean>> resultList = new ArrayList<>();
    for(EvenOddTask task : runner){
      resultList.add(service.submit(task));
    }

    for(Future result: resultList){
      System.out.println("Future Result : "+result.get());
    }
    service.shutdown();

  }

}
