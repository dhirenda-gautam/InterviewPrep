// { Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.io.*;
import java.io.*;

class Sorting
{
    public static void main (String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(br.readLine().trim()); //Inputting the testcases
		while(t-->0){
		    String inputLine[] = br.readLine().trim().split(" ");
		    int n = Integer.parseInt(inputLine[0]);
		    int m = Integer.parseInt(inputLine[1]);
		    int arr1[] = new int[n];
		    int arr2[] = new int[m];
		    inputLine = br.readLine().trim().split(" ");
		    for(int i=0; i<n; i++){
		        arr1[i] = Integer.parseInt(inputLine[i]);
		    }
		    inputLine = br.readLine().trim().split(" ");
		    for(int i=0; i<m; i++){
		        arr2[i] = Integer.parseInt(inputLine[i]);
		    }
		    
		    new MergeSort().merge(arr1, arr2, n, m);
		    
		    StringBuffer str = new StringBuffer();
		    for(int i=0; i<n; i++){
		        str.append(arr1[i]+" ");
		    }
		    for(int i=0; i<m; i++){
		        str.append(arr2[i]+" ");
		    }
		    System.out.println(str);
		}
	}
}
// } Driver Code Ends


//User function Template for Java

class MergeSort
{
    public static void merge(int arr1[], int arr2[], int n, int m) 
    {
     int pointerOne =0;
     int pointerTwo = 0;
     int minLength = arr1.length > arr2.length ? arr2.length: arr1.length;
     int maxLength = arr1.length > arr2.length ? arr1.length: arr2.length;
     
     while(pointerOne < minLength && pointerTwo < minLength){
      if(arr1[pointerOne] <arr2[pointerTwo]){
          System.out.print(arr1[pointerOne] + " ");
          pointerOne++;
      } else{
          System.out.print(arr2[pointerTwo]+ " ");
          pointerTwo++;
      }
     }
     
     if(pointerOne == minLength){
         while(pointerTwo < maxLength){
             System.out.print(arr2[pointerTwo] + " ");
             pointerTwo++;
         }
     }else{
         while(pointerOne < maxLength){
             System.out.print(arr1[pointerOne] + " ");
             pointerOne++;
         }
     }
 }
}
